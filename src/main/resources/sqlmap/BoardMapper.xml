<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.board.repository.BoardRepository">
    <select id="selectList" resultType="com.example.board.vo.BoardVo">
        select
            a.*,
            coalesce(b.up, 0) up,
            coalesce(c.comment_count, 0) comment_count
        from
            (select
                 a.*,
                 b.category_nm,
                 b.category_nm_en
             from
                 dc_board a,
                 dc_category b
             where
                 a.category_cd = b.category_cd
            ) a left join
            (select
                 a.board_seq,
                 count(1) up
             from
                 dc_up a
             where
                 check_up = '1'
             group by
                 board_seq
            ) b on a.board_seq = b.board_seq left join
            (select
                 board_seq,
                 count(1) comment_count
             from
                 dc_comment
             where
                 use_yn = '1'
             group by
                 board_seq
            ) c on a.board_seq = c.board_seq
        order by
            board_seq desc
    </select>

    <select id="selectOne" resultType="com.example.board.vo.BoardVo" parameterType="com.example.board.param.BoardParamVo">
        select
            a.*,
            coalesce(b.up, 0) up
        from
            (select
                 a.*,
                 b.category_nm,
                 b.category_nm_en
             FROM
                 dc_board a,
                 dc_category b
             WHERE
                 a.category_cd = b.category_cd and
                 a.board_seq = #{boardSeq}::integer
            ) a left join
            (select
                 a.board_seq,
                 count(1) up
             from
                 dc_up a
             where
                 check_up = '1' and
                 board_seq = #{boardSeq}::integer
             group by
                 board_seq
            ) b on a.board_seq = b.board_seq
    </select>

    <insert id="insertBoard" parameterType="com.example.board.vo.BoardVo">
        insert into dc_board(board_seq, title, content, category_cd) values(nextval('board_seq'), #{title}, #{content}, '1')
    </insert>

    <update id="updateHits" parameterType="com.example.board.param.BoardParamVo">
        update
            dc_board
        set
            hits = hits + 1
        where
            board_seq = #{boardSeq}::integer
    </update>

    <select id="selectCheckUp" parameterType="com.example.board.param.BoardParamVo" resultType="com.example.board.vo.BoardVo">
        select
            *
        from
            dc_up
        where
            user_id = #{userId} and
            board_seq = #{boardSeq}::integer
    </select>

    <insert id="updateUp" parameterType="com.example.board.param.BoardParamVo">
        insert into dc_up(board_seq, user_id, check_up)
        values(#{boardSeq}::integer, #{userId}, '1')
        on conflict (board_seq, user_id) do update
        set check_up = #{up},
            user_id = #{userId}
    </insert>

    <select id="selectCommentList" parameterType="com.example.board.param.BoardParamVo" resultType="com.example.board.vo.BoardVo">
        WITH RECURSIVE
            comment_tree(comment_seq, input_id, input_dt, board_seq, content, use_yn, p_comment_seq, lvl, path, cycle)
                AS (SELECT
                        comment_seq,
                        input_id,
                        input_dt,
                        board_seq,
                        content,
                        use_yn,
                        p_comment_seq,
                        lvl,
                        ARRAY[comment_seq],
                        false
                    from
                        dc_comment
                    WHERE
                        p_comment_seq IS NULL
                    UNION ALL
                    SELECT
                        c.comment_seq,
                        c.input_id,
                        c.input_dt,
                        c.board_seq,
                        c.content,
                        c.use_yn,
                        c.p_comment_seq,
                        c.lvl,
                        ct.path || c.comment_seq,
                        c.comment_seq = any(path)
                    from
                        dc_comment c,
                        comment_tree ct
                    where
                        c.p_comment_seq = ct.comment_seq
                      and not cycle
                    )
        select
            comment_seq,
            input_id,
            input_dt,
            board_seq,
            content,
            use_yn,
            p_comment_seq,
            lvl
        from
            comment_tree
        where
            board_seq = #{boardSeq}::integer and
            use_yn = '1'
        order by path
    </select>

    <insert id="insertComment" parameterType="com.example.board.param.BoardParamVo">
        insert into dc_comment
        <choose>
            <when test="pCommentSeq != null and pCommentSeq != ''">
                values(nextval('comment_seq'), 'test1', current_date, #{boardSeq}::integer, #{content}, '1', #{pCommentSeq}::integer, '1')
            </when>
            <otherwise>
                values(nextval('comment_seq'), 'test1', current_date, #{boardSeq}::integer, #{content}, '1', null, '0')
            </otherwise>
        </choose>
    </insert>
</mapper>